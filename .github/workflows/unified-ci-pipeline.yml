# .github/workflows/unified-ci-pipeline.yml

name: "Unified CI Pipeline"

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch (dev/staging/main)'
        required: true
        type: choice
        options:
          - dev
          - staging  
          - main
      # Testing options
      skip_tests:
        description: '[Tests] Skip all test stages'
        required: false
        default: false
        type: boolean
      
      # Deployment options
      deploy_action:
        description: '[Deployment] Action to perform'
        required: false
        default: 'build-and-push'
        type: choice
        options:
          - build-and-push
          - update-digest-only
          - force-rebuild
      
      deploy_auto_merge:
        description: '[Deployment] Auto-merge GitOps PR (ignored for main)'
        required: false
        default: true
        type: boolean
      
      deploy_force_cosign:
        description: '[Deployment] Force cosign operations'
        required: false
        default: false
        type: boolean
  push:
    branches: [dev, staging, main]
    paths:
      - 'it-works-on-my-machine/**'

jobs:
  detect-context:
    runs-on: ubuntu-latest
    outputs:
      target_branch: ${{ steps.branch.outputs.name }}
    steps:
      - name: Detect branch
        id: branch
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger - use input
            BRANCH_NAME="${{ inputs.target_branch }}"
          else
            # Push event - extract from ref
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          fi
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Detected branch: $BRANCH_NAME"

      - name: Context Summary
        if: always()
        run: |
          echo "## üéØ Unified CI Pipeline - Context Detection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Trigger Information" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger Type** | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Target Branch** | \`${{ steps.branch.outputs.name }}\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "| **Triggered By** | Manual dispatch |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Triggered By** | Push to branch |" >> $GITHUB_STEP_SUMMARY
            echo "| **Commit SHA** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
  
  run-tests:
    needs: detect-context
    if: ${{ inputs.skip_tests != true && !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Trigger and wait for tests-and-validations workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Triggering tests-and-validations workflow..."
          
          gh workflow run tests-and-validations.yml \
            --ref ${{ needs.detect-context.outputs.target_branch }} \
            -f target_branch=${{ needs.detect-context.outputs.target_branch }} \
            -f skip_stage6=true
          
          echo "‚è≥ Waiting for workflow to complete..."
          
          # Wait a moment for the run to be created
          sleep 5
          
          # Get the most recent run ID for this workflow
          RUN_ID=$(gh run list --workflow=tests-and-validations.yml --limit 1 --json databaseId --jq '.[0].databaseId')
          
          echo "üìä Watching run ID: $RUN_ID"
          
          # Wait for completion and check status
          gh run watch $RUN_ID --exit-status
          
          echo "‚úÖ Tests completed successfully"
      
      - name: Tests Summary
        if: always()
        run: |
          echo "## üß™ Unified CI Pipeline - Testing Phase" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Target Branch** | \`${{ needs.detect-context.outputs.target_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Tests Skipped** | \`${{ inputs.skip_tests || 'false' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ‚úÖ Test Execution" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **tests-and-validations.yml workflow completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "- All quality checks, tests, and validations passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Ready to proceed with deployment** üöÄ" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ job.status }}" == "skipped" ]; then
            echo "### ‚è≠Ô∏è Tests Skipped" >> $GITHUB_STEP_SUMMARY
            echo "- Testing phase was skipped by user input" >> $GITHUB_STEP_SUMMARY
            echo "- Proceeding directly to deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Test Execution Failed" >> $GITHUB_STEP_SUMMARY
            echo "- **tests-and-validations.yml workflow failed**" >> $GITHUB_STEP_SUMMARY
            echo "- Review the test workflow logs for details" >> $GITHUB_STEP_SUMMARY
            echo "- Deployment will be skipped" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY

  handle-main-release:
    needs: [detect-context, run-tests]
    if: ${{ needs.detect-context.outputs.target_branch == 'main' && !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to detect PR merges
      
      - name: Detect merge information
        id: merge-info
        run: |
          echo "üîç Detecting merge information..."
          
          # Check if HEAD is a merge commit
          PARENT_COUNT=$(git cat-file -p HEAD | grep '^parent' | wc -l)
          
          if [ "$PARENT_COUNT" -gt 1 ]; then
            echo "Merge commit detected"
            
            # Get commit message which typically contains PR info
            COMMIT_MSG=$(git log -1 --format=%s HEAD)
            
            # Try to extract PR number from commit message (format: "Merge pull request #123")
            if [[ "$COMMIT_MSG" =~ Merge\ pull\ request\ \#([0-9]+) ]]; then
              PR_NUMBER="${BASH_REMATCH[1]}"
              echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
              echo "Found PR number: $PR_NUMBER"
              
              # Get PR details using GitHub CLI
              PR_DATA=$(gh pr view $PR_NUMBER --json title,body,headRefName,baseRefName)
              PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
              PR_BODY=$(echo "$PR_DATA" | jq -r '.body')
              PR_HEAD_REF=$(echo "$PR_DATA" | jq -r '.headRefName')
              PR_BASE_REF=$(echo "$PR_DATA" | jq -r '.baseRefName')
              
              echo "PR Title: $PR_TITLE"
              echo "PR Head Ref: $PR_HEAD_REF"
              echo "PR Base Ref: $PR_BASE_REF"
              
              # Check if this is a release PR
              if [[ "$PR_HEAD_REF" =~ ^release/ && "$PR_BODY" == *"This PR will be tagged automatically after merge."* ]]; then
                echo "‚úÖ Release PR detected"
                
                # Extract version from PR body
                VERSION_LINE=$(echo "$PR_BODY" | grep -o '\*\*Version\*\*: v[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "")
                if [ -n "$VERSION_LINE" ]; then
                  EXTRACTED_VERSION=$(echo "$VERSION_LINE" | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+')
                  echo "is_release_pr=true" >> $GITHUB_OUTPUT
                  echo "version=$EXTRACTED_VERSION" >> $GITHUB_OUTPUT
                  echo "source_branch=$PR_HEAD_REF" >> $GITHUB_OUTPUT
                  echo "Extracted version: $EXTRACTED_VERSION"
                else
                  echo "‚ö†Ô∏è Release PR but no version found - using patch strategy"
                  echo "is_release_pr=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "Standard PR merge - using patch strategy"
                echo "is_release_pr=false" >> $GITHUB_OUTPUT
                echo "source_branch=$PR_HEAD_REF" >> $GITHUB_OUTPUT
              fi
            else
              echo "Could not extract PR number from commit message"
              echo "is_release_pr=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Direct push detected (not a merge) - using patch strategy"
            echo "is_release_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Trigger and wait for auto-patch-release workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üè∑Ô∏è Triggering auto-patch-release workflow..."
          
          gh workflow run auto-patch-release.yml \
            --ref main \
            -f is_release_pr=${{ steps.merge-info.outputs.is_release_pr || 'false' }} \
            -f version=${{ steps.merge-info.outputs.version || '' }} \
            -f source_branch=${{ steps.merge-info.outputs.source_branch || '' }}
          
          echo "‚è≥ Waiting for release workflow to complete..."
          sleep 5
          
          RUN_ID=$(gh run list --workflow=auto-patch-release.yml --limit 1 --json databaseId --jq '.[0].databaseId')
          
          echo "üìä Watching run ID: $RUN_ID"
          gh run watch $RUN_ID --exit-status
          
          echo "‚úÖ Release created successfully"
      
      - name: Release Summary
        if: always()
        run: |
          echo "## üè∑Ô∏è Unified CI Pipeline - Release Creation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Target Branch** | \`main\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Is Release PR** | \`${{ steps.merge-info.outputs.is_release_pr || 'false' }}\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.merge-info.outputs.is_release_pr }}" == "true" ]; then
            echo "| **Version** | \`${{ steps.merge-info.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Source Branch** | \`${{ steps.merge-info.outputs.source_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ‚úÖ Release Created" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **auto-patch-release.yml workflow completed successfully**" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.merge-info.outputs.is_release_pr }}" == "true" ]; then
              echo "- üì¶ **Release Type**: Manual release (version: ${{ steps.merge-info.outputs.version }})" >> $GITHUB_STEP_SUMMARY
            else
              echo "- üîß **Release Type**: Patch release (auto-bumped)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Proceeding to deployment** üöÄ" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Release Creation Failed" >> $GITHUB_STEP_SUMMARY
            echo "- **auto-patch-release.yml workflow failed**" >> $GITHUB_STEP_SUMMARY
            echo "- Review the release workflow logs for details" >> $GITHUB_STEP_SUMMARY
            echo "- Deployment will be skipped" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY

  trigger-deployment:
    needs: [detect-context, run-tests, handle-main-release]
    if: ${{ !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Trigger and wait for application-deploy workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Triggering application-deploy workflow..."
          
          gh workflow run application-deploy.yml \
            --ref ${{ needs.detect-context.outputs.target_branch }} \
            -f target_branch=${{ needs.detect-context.outputs.target_branch }} \
            -f action=${{ inputs.deploy_action || 'build-and-push' }} \
            -f auto_merge=${{ inputs.deploy_auto_merge || 'true' }} \
            -f force_cosign=${{ inputs.deploy_force_cosign || 'false' }}
          
          echo "‚è≥ Waiting for deployment workflow to complete..."
          
          # Wait a moment for the run to be created
          sleep 5
          
          # Get the most recent run ID for this workflow
          RUN_ID=$(gh run list --workflow=application-deploy.yml --limit 1 --json databaseId --jq '.[0].databaseId')
          
          echo "üìä Watching run ID: $RUN_ID"
          
          # Wait for completion and check status
          gh run watch $RUN_ID --exit-status
          
          echo "‚úÖ Deployment completed successfully for ${{ needs.detect-context.outputs.target_branch }}"
      
      - name: Deployment Summary
        if: always()
        run: |
          echo "## üöÄ Unified CI Pipeline - Deployment Phase" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Target Branch** | \`${{ needs.detect-context.outputs.target_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Action** | \`${{ inputs.deploy_action || 'build-and-push' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Auto-merge** | \`${{ inputs.deploy_auto_merge || 'true' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Force Cosign** | \`${{ inputs.deploy_force_cosign || 'false' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ‚úÖ Deployment Triggered" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **application-deploy.yml workflow triggered successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. üê≥ Building and pushing container image to ECR" >> $GITHUB_STEP_SUMMARY
            echo "2. üìù Creating GitOps PR with updated image digest" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.detect-context.outputs.target_branch }}" == "main" ]; then
              echo "3. ‚è≥ **Awaiting manual approval** (production deployment)" >> $GITHUB_STEP_SUMMARY
            else
              echo "3. üîÑ Auto-merging GitOps PR (dev/staging)" >> $GITHUB_STEP_SUMMARY
              echo "4. üéØ ArgoCD will automatically sync changes" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ job.status }}" == "skipped" ]; then
            echo "### ‚è≠Ô∏è Deployment Skipped" >> $GITHUB_STEP_SUMMARY
            echo "- Deployment was skipped due to previous failures or conditions" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Deployment Trigger Failed" >> $GITHUB_STEP_SUMMARY
            echo "- Failed to trigger application-deploy.yml workflow" >> $GITHUB_STEP_SUMMARY
            echo "- Review logs above for error details" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
