# .github/workflows/auto-patch-release.yml

name: Auto Patch Release

concurrency:
  group: auto-release
  cancel-in-progress: false
  
on:
  workflow_dispatch:
    inputs:
      is_release_pr:
        description: 'Is this from a release PR merge?'
        required: false
        default: 'false'
        type: string
      version:
        description: 'Release version (if release PR)'
        required: false
        type: string
      source_branch:
        description: 'Source branch of the merge'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Determine tagging strategy
        id: strategy
        run: |
          echo "Analyzing release strategy..."
          
          if [ "${{ inputs.is_release_pr }}" == "true" ] && [ -n "${{ inputs.version }}" ]; then
            echo "strategy=release" >> $GITHUB_OUTPUT
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "Using release strategy with version: ${{ inputs.version }}"
          else
            echo "strategy=patch" >> $GITHUB_OUTPUT
            echo "Using patch bump strategy"
          fi
          
      - name: Get latest tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"
          
      - name: Calculate new version
        id: new-version
        run: |
          if [ "${{ steps.strategy.outputs.strategy }}" == "release" ]; then
            NEW_VERSION="${{ steps.strategy.outputs.version }}"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Using provided version: $NEW_VERSION"
          else
            LATEST="${{ steps.latest-tag.outputs.tag }}"
            VERSION=${LATEST#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Patch bump: $LATEST to $NEW_VERSION"
          fi
          
      - name: Validate version
        run: |
          LATEST="${{ steps.latest-tag.outputs.tag }}"
          NEW="${{ steps.new-version.outputs.version }}"
          
          if [ "$LATEST" == "$NEW" ]; then
            echo "Error: New version is same as latest tag"
            exit 1
          fi
          
          echo "Version validation passed"
          
      - name: Create tag and release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          NEW_VERSION="${{ steps.new-version.outputs.version }}"
          STRATEGY="${{ steps.strategy.outputs.strategy }}"
          
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"
          echo "Tag created and pushed: $NEW_VERSION"
          
          if [ "$STRATEGY" == "release" ]; then
            RELEASE_NOTES="Release $NEW_VERSION

            Triggered by: unified-ci-pipeline workflow
            Source Branch: ${{ inputs.source_branch }}
            Release Type: Manual release from release PR

            This release was created automatically after merging a release PR to main."
          else
            if [ -n "${{ inputs.source_branch }}" ]; then
              RELEASE_NOTES="Patch Release $NEW_VERSION

              Triggered by: unified-ci-pipeline workflow
              Source Branch: ${{ inputs.source_branch }}
              Release Type: Automatic patch bump

              This patch release was created automatically from changes merged to main."
            else
              RELEASE_NOTES="Patch Release $NEW_VERSION

              Triggered by: unified-ci-pipeline workflow
              Release Type: Automatic patch bump (direct push)

              This patch release was created automatically from a direct push to main."
            fi
          fi
          
          gh release create "$NEW_VERSION" \
            --title "Release $NEW_VERSION" \
            --notes "$RELEASE_NOTES" \
            --latest
          
          echo "GitHub release created: $NEW_VERSION"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Release Summary
        if: always()
        run: |
          echo "## Auto Patch Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Strategy | ${{ steps.strategy.outputs.strategy }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Is Release PR | ${{ inputs.is_release_pr }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Source Branch | ${{ inputs.source_branch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Latest Tag | ${{ steps.latest-tag.outputs.tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| New Version | ${{ steps.new-version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "### Release Created Successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ steps.strategy.outputs.strategy }}" == "release" ]; then
              echo "- Type: Manual release" >> $GITHUB_STEP_SUMMARY
              echo "- Version: ${{ steps.new-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Type: Automatic patch bump" >> $GITHUB_STEP_SUMMARY
              echo "- Bump: ${{ steps.latest-tag.outputs.tag }} to ${{ steps.new-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### Release Creation Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Review the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi