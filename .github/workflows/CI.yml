# .github/workflows/ci.yml

name: "Stage 1: Code Quality & Standards Validation"

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'it-works-on-my-machine/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'it-works-on-my-machine/**'
  workflow_dispatch:

jobs:
  stage1-quality:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: it-works-on-my-machine/
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'it-works-on-my-machine/package-lock.json'
    
    ############### NPM Validations
    ##### lockfile
    - name: Install lockfile-lint
      run: npm install -g lockfile-lint

    - name: Validate lockfile integrity
      run: |
        echo "🔒 Validating lockfile integrity..."
        lockfile-lint --path package-lock.json --validate-https --allowed-hosts npm registry.npmjs.org
    #####

    ##### audit
    - name: Security audit
      run: |
        echo "🛡️ Running security audit..."
        npm audit --audit-level moderate
    #####

    - name: Validate package-lock consistency
      run: |
        echo "🔍 Checking package-lock.json consistency..."
        npm ci --dry-run

    ##### License checker
    - name: Install license-checker
      run: npm install -g license-checker

    - name: Check license compliance
      run: |
        echo "📄 Checking license compliance..."
        npm ci
        license-checker --onlyAllow 'MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause' --summary
    #####
    ###############

    ############### Code Standards Block
    ##### ESLint
    - name: Setup ESLint
      run: |
        echo "Setting up ESLint..."
        npm install -g eslint@^8.57.0
        if [ ! -f .eslintrc.json ]; then
          echo '{"extends": ["eslint:recommended"], "env": {"node": true, "es2021": true}, "parserOptions": {"ecmaVersion": 12}}' > .eslintrc.json
        fi
        
    - name: Run ESLint
      run: |
        echo "🧹 Running ESLint..."
        eslint . --format unix --ext .js
    #####

    ##### Prettier
    - name: Setup Prettier
      run: npm install -g prettier
    
    - name: Check code formatting
      run: |
        echo "💅 Checking code formatting..."
        prettier --check "**/*.{js,json,md}" || {
          echo "❌ Code formatting issues found. Run 'prettier --write .' to fix."
          exit 1
        }
    #####

    ############### Docker Validation
    ##### Hadolint
    - name: Install hadolint
      run: |
        wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x hadolint
        sudo mv hadolint /usr/local/bin/

    - name: Lint Dockerfile
      run: |
        echo "🐳 Linting Dockerfile..."
        hadolint Dockerfile
    #####
    ###############

    ############### Shell Script Validation
    ##### Spellcheck
    - name: Install shellcheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck
    
    - name: Lint shell scripts
      run: |
        echo "📜 Linting shell scripts..."
        find . -name "*.sh" -type f -exec shellcheck {} \;
    #####
    ###############
    
    - name: Stage 1 Summary
      if: always()  # Always run, but show actual results
      run: |
        echo "📊 Stage 1: Code Quality & Standards Validation Results"
        echo "Status: ${{ job.status }}"
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ All checks passed"
        else
          echo "❌ Some checks failed - see above for details"
        fi