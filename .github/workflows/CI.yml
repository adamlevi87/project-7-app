# .github/workflows/ci.yml

name: "Stage 1: Code Quality & Standards Validation"

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'it-works-on-my-machine/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'it-works-on-my-machine/**'
  workflow_dispatch:

jobs:
  stage1-quality:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: it-works-on-my-machine/
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'it-works-on-my-machine/package-lock.json'
    
    ############### NPM Validations
    ##### lockfile
    ##### Installs tool to validate package-lock.json security and registry sources.
    ##### Validates lock file uses HTTPS and only allows public npm registry URLs.
    - name: Install lockfile-lint
      run: npm install -g lockfile-lint

    - name: Validate lockfile integrity
      run: |
        echo "üîí Validating lockfile integrity..."
        lockfile-lint --path package-lock.json --validate-https --allowed-hosts npm registry.npmjs.org
    #####

    ##### audit
    ##### Scans package metadata for known security vulnerabilities without installing anything. Uses npm's vulnerability database.
    - name: Security audit
      run: |
        echo "üõ°Ô∏è Running security audit..."
        npm audit --audit-level moderate
    #####

    ##### NPM clean install
    ##### Simulates installing exact versions from package-lock.json to check if everything can be resolved correctly. Catches version conflicts, missing packages, or corrupted lock files.
    - name: Validate package-lock consistency
      run: |
        echo "üîç Checking package-lock.json consistency..."
        npm ci --dry-run

    ##### License checker
    ##### installs Installs tool to validate dependency licenses against approved list.
    ##### Reads license information from installed packages in node_modules and validates they match allowed license types.
    - name: Install license-checker
      run: npm install -g license-checker

    - name: Check license compliance
      run: |
        echo "üìÑ Checking license compliance..."
        npm ci
        license-checker --onlyAllow 'MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause' --summary
    #####
    ###############

    ############### Code Standards Block
    ##### ESLint
    ##### eslint setup Installs ESLint tool and creates a basic configuration file for JavaScript code analysis.
    ##### Analyzes JavaScript files for syntax errors, potential bugs, and code style violations.
    - name: Setup ESLint
      run: |
        echo "Setting up ESLint..."
        npm install -g eslint@^8.57.0
        if [ ! -f .eslintrc.json ]; then
          echo '{"extends": ["eslint:recommended"], "env": {"node": true, "es2021": true}, "parserOptions": {"ecmaVersion": 12}}' > .eslintrc.json
        fi
        
    - name: Run ESLint
      run: |
        echo "üßπ Running ESLint..."
        eslint . --format unix --ext .js
    #####

    ##### Prettier
    ##### Installs Prettier code formatting tool.
    ##### prettier check- Validates that all code files follow consistent formatting rules without modifying them.
    - name: Setup Prettier
      run: npm install -g prettier
    
    - name: Check code formatting
      run: |
        echo "üíÖ Checking code formatting..."
        prettier --check "**/*.{js,json,md}" || {
          echo "‚ùå Code formatting issues found. Run 'prettier --write .' to fix."
          exit 1
        }
    #####

    ############### Docker Validation
    ##### Node version compare
    ##### Making sure the Node Version from the workflow matches the one used in the Docker File
    - name: Validate Node version consistency
      run: |
        # Get major version from workflow (node --version gives v18.17.0)
        WORKFLOW_MAJOR=$(node --version | sed 's/v//' | cut -d'.' -f1)

        # Get major version from Dockerfile (FROM node:18.17.0-alpine)
        DOCKERFILE_MAJOR=$(grep "FROM node:" Dockerfile | sed 's/FROM node://' | sed 's/-.*//' | cut -d'.' -f1)

        if [[ "$DOCKERFILE_MAJOR" != "$WORKFLOW_MAJOR" ]]; then
          echo "Node major version mismatch:"
          echo "   Dockerfile: $DOCKERFILE_MAJOR"
          echo "   CI workflow: $WORKFLOW_MAJOR"
          exit 1
        fi
        echo "Node versions consistent"

    ##### Hadolint
    ##### hadolint installation- Downloads and installs tool for analyzing Dockerfile best practices.
    ##### hadolint execution- Scans Dockerfile for security issues, inefficiencies, and rule violations.
    - name: Install hadolint
      run: |
        wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x hadolint
        sudo mv hadolint /usr/local/bin/

    - name: Lint Dockerfile
      run: |
        echo "üê≥ Linting Dockerfile..."
        hadolint Dockerfile
    #####

    ##### Dockle
    ##### Installs dockle
    ##### Build and scan
    - name: Install dockle
      run: |
        VERSION=$(curl -s https://api.github.com/repos/goodwithtech/dockle/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        VERSION_NUM=$(echo $VERSION | sed 's/v//')
        curl -L -o dockle.tar.gz https://github.com/goodwithtech/dockle/releases/download/${VERSION}/dockle_${VERSION_NUM}_Linux-64bit.tar.gz
        tar zxf dockle.tar.gz
        sudo mv dockle /usr/local/bin/
        rm dockle.tar.gz LICENSE README.md

    - name: Run dockle security scan
      run: |
        # Build image first for dockle to scan
        docker build -t dockle-scan .
        dockle dockle-scan
    ###############

    ############### Shell Script Validation
    ##### Spellcheck
    ##### shellcheck installation- Installs tool for analyzing shell scripts.
    ##### shellcheck execution - Analyzes shell scripts for syntax errors, portability issues, and common mistakes.
    - name: Install shellcheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck
    
    - name: Lint shell scripts
      run: |
        echo "üìú Linting shell scripts..."
        find . -name "*.sh" -type f -exec shellcheck {} \;
    #####
    ###############
    
    - name: Stage 1 Summary
      if: always()  # Always run, but show actual results
      run: |
        echo "üìä Stage 1: Code Quality & Standards Validation Results"
        echo "Status: ${{ job.status }}"
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ All checks passed"
        else
          echo "‚ùå Some checks failed - see above for details"
        fi